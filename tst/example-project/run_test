#!/bin/bash -e

example_root="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
stack_name="s3-upload-custom-resource-lambda-layer-test-stack"
test_data_dir="${example_root}/test-data"

lambda_layer_arn="$1"

if [ -z "${lambda_layer_arn}" ]; then
    echo "Lambda Layer ARN expected as first parameter"
    exit 1
fi

tmp_dir="${example_root}/../../dist/tmp"
output_cloudformation="${tmp_dir}/example-cloudformation.yml"

echo "Using Lambda Layer: ${lambda_layer_arn}"

function delete_stack() {
    aws cloudformation delete-stack --stack-name "${stack_name}" || \
            echo "Failed to delete stack. Return Code: $?"
    aws cloudformation wait stack-delete-complete \
            --stack-name "${stack_name}"
}

function test_failure() {
    retcode="$1"

    echo "Return Code: ${retcode}. Failure encountered!"
    delete_stack
}

function catch() {
    retcode="$1"

    if [ "${retcode}" == "0" ]; then
        delete_stack
    else
        test_failure "${retcode}"
    fi
}

function compare_bucket_contents() {
    bucket_name="$1"
    expectation_file="$2"
    
    contents="$(aws s3api list-objects --bucket "${bucket_name}")"
    simple_contents="$(echo $contents | jq '[.Contents[] | {Key, Size, ETag}]')"

    echo "${simple_contents}" | diff "${expectation_file}" -
}

function package_and_deploy_example_project() {
    source_root="$1"

    sed "s_!!!source-root!!!_${source_root}_" "${example_root}/cloudformation.yml" > "${output_cloudformation}"

    aws cloudformation package \
            --template-file "${output_cloudformation}" \
            --s3-bucket sam-915290536872 \
            --output-template-file "${output_cloudformation}" \
            --use-json

    code_uri="$(jq '.Resources.TestUploaderLambda.Properties.CodeUri' "${output_cloudformation}" --raw-output)"

    aws cloudformation deploy \
            --template-file "${output_cloudformation}" \
            --stack-name "${stack_name}" \
            --capabilities CAPABILITY_IAM \
            --parameter-overrides "UploadedContentVersion=${code_uri}" "S3UploadLambdaLayerArn=${lambda_layer_arn}" "SourceRoot=${source_root}" \
            --no-fail-on-empty-changeset
}

delete_stack

trap 'catch $?' err exit

package_and_deploy_example_project "${example_root}/src-1"

stack_description="$(aws cloudformation describe-stacks \
        --stack-name "${stack_name}")"


root_bucket_name="$(echo "${stack_description}" | \
        jq '.Stacks[] | select(.StackName=="'"${stack_name}"'") | .Outputs[] | select(.OutputKey=="RootTestBucketName") | .OutputValue' --raw-output
)"
foobar_bucket_name="$(echo "${stack_description}" | \
        jq '.Stacks[] | select(.StackName=="'"${stack_name}"'") | .Outputs[] | select(.OutputKey=="FooBarTestBucketName") | .OutputValue' --raw-output
)"

echo "Cloudformation deployed successfully. Buckets for test => Root Bucket: ${root_bucket_name}, FooBar Bucket: ${foobar_bucket_name}"

compare_bucket_contents "${root_bucket_name}" "${test_data_dir}/root-contents-1.txt"
compare_bucket_contents "${foobar_bucket_name}" "${test_data_dir}/foo-bar-contents-1.txt"

echo "Contents are as expected for src-1"

package_and_deploy_example_project "${example_root}/src-2"

compare_bucket_contents "${root_bucket_name}" "${test_data_dir}/root-contents-2.txt"
compare_bucket_contents "${foobar_bucket_name}" "${test_data_dir}/foo-bar-contents-2.txt"

echo "Contents are as expected for src-2"

aws cloudformation delete-stack --stack-name "${stack_name}"
aws cloudformation wait stack-delete-complete \
        --stack-name "${stack_name}"

echo "CloudFormation stack successfully cleaned up"

aws s3api head-bucket --bucket "${root_bucket_name}" 2>&1 | grep 'HeadBucket operation: Not Found'
aws s3api head-bucket --bucket "${foobar_bucket_name}" 2>&1 | grep 'HeadBucket operation: Not Found'

echo "Buckets successfully deleted"
